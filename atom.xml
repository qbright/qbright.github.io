<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[光域]]></title>
  <link href="http://qbright.github.io/atom.xml" rel="self"/>
  <link href="http://qbright.github.io/"/>
  <updated>2014-12-02T18:37:22+08:00</updated>
  <id>http://qbright.github.io/</id>
  <author>
    <name><![CDATA[zqbright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chrome Csp]]></title>
    <link href="http://qbright.github.io/blog/2014/12/02/chrome-csp-11/"/>
    <updated>2014-12-02T17:51:23+08:00</updated>
    <id>http://qbright.github.io/blog/2014/12/02/chrome-csp-11</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<blockquote><p><a href="https://w3c.github.io/webappsec/specs/content-security-policy/">Content Security Policy(CSP)</a> 是一种计算机安全的概念 , 用来防御跨站脚本攻击<a href="http://en.wikipedia.org/wiki/Cross-site_scripting">(XSS)</a> , 现在他是W3C网络应用安全的候选标准,CPS 提供了一种标准的HTTP头让网站去声明允许那些资源加载到自己的网页之中 , 能够控制到 JavaScript , CSS , HTML , Frames , fonts , image , embeddable object , Java applets , ActiveX , audio 和video 等类型的资源。CSP 刚开始是由 <a href="http://en.wikipedia.org/wiki/Mozilla_Foundation">Mozilla 基金会</a> 制定并实现在 Firefox4 中,下面为CSP各种<strong>部分实现</strong>的版本:</p></blockquote>

<!-- more -->


<blockquote><blockquote><ul>
<li>Content-Security-Policy : W3C推荐的标准的头部命名 , 被 Chrome 25 , Firefox 23 支持。</li>
<li>X-WebKit-CSP : 在 2011 年被Chrome和基于WebKit内核的浏览器所支持。</li>
<li>X-Content-Security-Policy : 被 Gecko2 内核的浏览器Firefox 4 、Thunderbird 3.3 SeaMonkey2.1 支持。在 IE10 和 IE11 的沙箱模式中也支持这种头部。 另外一些框架也支持CSP , 例如 <a href="https://angularjs.org/">AngularJs</a> 和 <a href="https://www.djangoproject.com/">Django</a></li>
</ul>
</blockquote></blockquote>

<h3>规则</h3>

<blockquote><p>这里主要谈谈CSP在Chrome extension中的应用 , 在通常情况下 , CSP通过黑白名单的机制控制资源的加载和执行脚本 , 为Chrome extension 提供一种定制的策略 , 由开发者去确定哪些资源是Chrome extension 需要被访问的 , 这些策略在Chrome extension 的 host permission 上提供另外一层保护。上面说到，在Web上这个策略是通过HTTP头或meta元素定义的 , 在 Chrome extension 中 , 不存在这两种方式 , 扩展是通过 <strong>manifest.json</strong> 文件定义的:</p>

<blockquote><p>{&ldquo;content_security_policy&rdquo;: &ldquo;[POLICY STRING GOES HERE]&rdquo; }</p></blockquote>

<h4>默认安全策略</h4>

<blockquote><p>没有定义 <strong>manifest.json</strong> 文件中的 <strong>manifest_version</strong> 字段默认是没有安全策略的，只有定义了 manifest_version 为 2 的扩展才会启用默认的内容安全策略。(现版本的chrome extension 都强制需要指定 manifest_version 的值为 2 )。</p>

<blockquote><p>默认的安全策略为：<strong>script-src &lsquo; self &rsquo; ; object-src &lsquo; self &rsquo;</strong>,  具体策略如下：</p>

<hr />

<p><strong>不执行 Inline JavaScript</strong></p>

<blockquote><p>Inline JavaScript 不会在页面被执行 , 这个规则同时禁止内嵌 <strong>&lt;script&gt;</strong> 标签 和 元素的内联事件 (例如:<strong>&lt; button onclick=&ldquo;XXX&rdquo;&gt;</strong>); 当使用 Inline JavaScript 的时候 , Chrome extension 会抛出 <strong>Refused to execute inline script because it violates the following Content Security Policy directive: &hellip; &ldquo;</strong> 错误。</p>

<blockquote><p>注意：当使用jquery的ajax方法时，如果将dataType指定为<strong>script</strong> 时 , 也会被CSP规则拦截。</p>

<h4>只加载本地脚本和资源</h4>

<p>在Chrome extension 中，只有扩展包类的脚本和资源才会被加载, 这确保了扩展只执行已经打包在扩展之中的可信代码，从而避免了向上的网络攻击者通过恶意重定向您所请求的Web资源所带来的安全隐患。因此，在使用JQuery等第三方库或者框架时，应该在扩展包中引入这个源文件，而不能通过外部的内容分发网络（CDN）进行在线加载。也就是说，在页面不能出现：
    <strong>&lt;script src=&ldquo;<a href="http://ajax.googleapis.com/ajax/libs/jquery/2.0.1/jquery.min.js">http://ajax.googleapis.com/ajax/libs/jquery/2.0.1/jquery.min.js</a>&rdquo;&gt;&lt;/script&gt;</strong>
    只能把源文件下载到扩展包中,通过相对路径去引用 ：
    <strong>&lt;script src=&ldquo;jquery.min.js&rdquo; &gt;&lt;/script &gt;</strong></p></blockquote></blockquote></blockquote></blockquote>

<p>更改默认的权限配置</p>

<blockquote><p>首先 , 在chrome extension 中，没有任何办法绕过 <strong>禁止 Inline JavaScript</strong> 的限制,对于第二个限制 <strong>只加载本地脚本和资源</strong> ,可以通过将 <strong>HTTPS</strong> 源的脚本加入到配置的白名单中来放宽策略的限制。另外白名单不支持<strong>HTTP</strong>协议的源。
如果要允许加载来自<a href="Https://example.com%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9C%80%E8%A6%81%E6%8A%8A%E9%85%8D%E7%BD%AE%E6%94%B9%E4%B8%BA:">Https://example.com%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9C%80%E8%A6%81%E6%8A%8A%E9%85%8D%E7%BD%AE%E6%94%B9%E4%B8%BA:</a></p>

<blockquote><p>{
        &ldquo;content_security_policy&rdquo;: &ldquo;script-src &lsquo;self&rsquo; <a href="https://example.com">https://example.com</a> ; object-src &lsquo;self&rsquo;&rdquo;
    }</p></blockquote>

<p>需要指出的是 chrome extension 中 script-src 和object-src 都是需要配置的。</p></blockquote>

<p>下面为所有能够进行配置的资源项字段:</p>

<ul>
<li>default-src : 这个配置对所有的资源文件生效</li>
<li>script-src : 这个配置匹配所有的javascript资源, 默认情况下阻止所有对远程资源的引用(除非加上白名单引用https源) , 禁止执行inline script 和 eval() 方法,除非你指定了 unsafe-inline 和 unsafe-eval 配置。</li>
<li>object-src : 这个配置对所有 &lt;object&gt; &lt;embed&gt; &lt;applet&gt; 标签引用的源进行限制</li>
<li>img-src : 这个配置对所有图片和favicons起效</li>
<li>media-src : 这个配置对所有的 &lt;audio&gt; 和 &lt;video &gt; 标签引用的资源起效</li>
<li>frame-src : 这个配置对所有的 &lt;frame&gt; 和 &lt;iframe&gt; 标签引用的资源起效</li>
<li>font-src : 这个配置对@font-face 应用的资源起效</li>
<li>connect-src : 这个配置对XMLHttpRequest 请求的资源起效</li>
<li>style-src : 这个配置对 &lt;style &gt; 标签引用的资源起效</li>
<li>report-uri ： 这个配置用于指定一个url , 在检测到违反Chrome extension CSP配置的时候进行信息上报。

<blockquote><p>report 上报的信息有：</p>

<blockquote><ul>
<li>document-uri : 违反规则的页面URI</li>
</ul>
</blockquote></blockquote></li>
<li>referrer : 违反规则的页面的referrer</li>
<li>blocked-uri : 违反规则的请求链接uri</li>
<li>violated-directive : 违反的规则名称</li>
</ul>
</blockquote>

<h3>开发时对于CSP的注意事项</h3>

<blockquote><p>在开发的过程中也因为CSP的限制遇到了一些问题, 首先是在开发YY音乐台的过程中，之前制定好的方法是将YY音乐台整个打包到扩展之中，但是由于CSP的限制，其中的音频，视频的flash资源都不能通过外部接口去请求，由于各种原因音频视频的资源无法使用https的服务,最后采用的折中策略就是将YY音乐台部署在线上，需要和浏览器交互的部分使用 content_script 进行注入控制进行交互，这样做绕过了CSP的限制，但是由于是一个线上的Web应用程序，在开发过程中做出浏览器兼容性的调整，而且由于线上更新和浏览器版本的更新存在时间差 , 还要对浏览器扩展的版本做出兼容 , 所以在开发的时候需要权衡各方面的开发成本。</p>

<p>如果确实需要应用外部的http的资源，其实还有个比较绕弯的方法，就是通过ajax请求将资源请求回来，然后用过 chrome.tabs.executescript 或者 chrome.tabs.insertCSS 进行资源插入 , 从而到达运行的目的 (不知道这算不算是一个Chrome extension 权限策略的漏洞= =)</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Csp]]></title>
    <link href="http://qbright.github.io/blog/2014/12/02/chrome-csp/"/>
    <updated>2014-12-02T17:51:23+08:00</updated>
    <id>http://qbright.github.io/blog/2014/12/02/chrome-csp</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<blockquote><p><a href="https://w3c.github.io/webappsec/specs/content-security-policy/">Content Security Policy(CSP)</a> 是一种计算机安全的概念 , 用来防御跨站脚本攻击<a href="http://en.wikipedia.org/wiki/Cross-site_scripting">(XSS)</a> , 现在他是W3C网络应用安全的候选标准,CPS 提供了一种标准的HTTP头让网站去声明允许那些资源加载到自己的网页之中 , 能够控制到 JavaScript , CSS , HTML , Frames , fonts , image , embeddable object , Java applets , ActiveX , audio 和video 等类型的资源。CSP 刚开始是由 <a href="http://en.wikipedia.org/wiki/Mozilla_Foundation">Mozilla 基金会</a> 制定并实现在 Firefox4 中,下面为CSP各种<strong>部分实现</strong>的版本:</p></blockquote>

<!-- more -->


<blockquote><blockquote><ul>
<li>Content-Security-Policy : W3C推荐的标准的头部命名 , 被 Chrome 25 , Firefox 23 支持。</li>
<li>X-WebKit-CSP : 在 2011 年被Chrome和基于WebKit内核的浏览器所支持。</li>
<li>X-Content-Security-Policy : 被 Gecko2 内核的浏览器Firefox 4 、Thunderbird 3.3 SeaMonkey2.1 支持。在 IE10 和 IE11 的沙箱模式中也支持这种头部。 另外一些框架也支持CSP , 例如 <a href="https://angularjs.org/">AngularJs</a> 和 <a href="https://www.djangoproject.com/">Django</a></li>
</ul>
</blockquote></blockquote>

<h3>规则</h3>

<blockquote><p>这里主要谈谈CSP在Chrome extension中的应用 , 在通常情况下 , CSP通过黑白名单的机制控制资源的加载和执行脚本 , 为Chrome extension 提供一种定制的策略 , 由开发者去确定哪些资源是Chrome extension 需要被访问的 , 这些策略在Chrome extension 的 host permission 上提供另外一层保护。上面说到，在Web上这个策略是通过HTTP头或meta元素定义的 , 在 Chrome extension 中 , 不存在这两种方式 , 扩展是通过 <strong>manifest.json</strong> 文件定义的:</p>

<blockquote><p>{&ldquo;content_security_policy&rdquo;: &ldquo;[POLICY STRING GOES HERE]&rdquo; }</p></blockquote>

<h4>默认安全策略</h4>

<blockquote><p>没有定义 <strong>manifest.json</strong> 文件中的 <strong>manifest_version</strong> 字段默认是没有安全策略的，只有定义了 manifest_version 为 2 的扩展才会启用默认的内容安全策略。(现版本的chrome extension 都强制需要指定 manifest_version 的值为 2 )。</p>

<blockquote><p>默认的安全策略为：<strong>script-src &lsquo; self &rsquo; ; object-src &lsquo; self &rsquo;</strong>,  具体策略如下：</p>

<hr />

<p><strong>不执行 Inline JavaScript</strong></p>

<blockquote><p>Inline JavaScript 不会在页面被执行 , 这个规则同时禁止内嵌 <strong>&lt;script&gt;</strong> 标签 和 元素的内联事件 (例如:<strong>&lt; button onclick=&ldquo;XXX&rdquo;&gt;</strong>); 当使用 Inline JavaScript 的时候 , Chrome extension 会抛出 <strong>Refused to execute inline script because it violates the following Content Security Policy directive: &hellip; &ldquo;</strong> 错误。</p>

<blockquote><p>注意：当使用jquery的ajax方法时，如果将dataType指定为<strong>script</strong> 时 , 也会被CSP规则拦截。</p>

<h4>只加载本地脚本和资源</h4>

<p>在Chrome extension 中，只有扩展包类的脚本和资源才会被加载, 这确保了扩展只执行已经打包在扩展之中的可信代码，从而避免了向上的网络攻击者通过恶意重定向您所请求的Web资源所带来的安全隐患。因此，在使用JQuery等第三方库或者框架时，应该在扩展包中引入这个源文件，而不能通过外部的内容分发网络（CDN）进行在线加载。也就是说，在页面不能出现：
    <strong>&lt;script src=&ldquo;<a href="http://ajax.googleapis.com/ajax/libs/jquery/2.0.1/jquery.min.js">http://ajax.googleapis.com/ajax/libs/jquery/2.0.1/jquery.min.js</a>&rdquo;&gt;&lt;/script&gt;</strong>
    只能把源文件下载到扩展包中,通过相对路径去引用 ：
    <strong>&lt;script src=&ldquo;jquery.min.js&rdquo; &gt;&lt;/script &gt;</strong></p></blockquote></blockquote></blockquote></blockquote>

<p>更改默认的权限配置</p>

<blockquote><p>首先 , 在chrome extension 中，没有任何办法绕过 <strong>禁止 Inline JavaScript</strong> 的限制,对于第二个限制 <strong>只加载本地脚本和资源</strong> ,可以通过将 <strong>HTTPS</strong> 源的脚本加入到配置的白名单中来放宽策略的限制。另外白名单不支持<strong>HTTP</strong>协议的源。
如果要允许加载来自<a href="Https://example.com%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9C%80%E8%A6%81%E6%8A%8A%E9%85%8D%E7%BD%AE%E6%94%B9%E4%B8%BA:">Https://example.com%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9C%80%E8%A6%81%E6%8A%8A%E9%85%8D%E7%BD%AE%E6%94%B9%E4%B8%BA:</a></p>

<blockquote><p>{
        &ldquo;content_security_policy&rdquo;: &ldquo;script-src &lsquo;self&rsquo; <a href="https://example.com">https://example.com</a> ; object-src &lsquo;self&rsquo;&rdquo;
    }</p></blockquote>

<p>需要指出的是 chrome extension 中 script-src 和object-src 都是需要配置的。</p></blockquote>

<p>下面为所有能够进行配置的资源项字段:</p>

<ul>
<li>default-src : 这个配置对所有的资源文件生效</li>
<li>script-src : 这个配置匹配所有的javascript资源, 默认情况下阻止所有对远程资源的引用(除非加上白名单引用https源) , 禁止执行inline script 和 eval() 方法,除非你指定了 unsafe-inline 和 unsafe-eval 配置。</li>
<li>object-src : 这个配置对所有 &lt;object&gt; &lt;embed&gt; &lt;applet&gt; 标签引用的源进行限制</li>
<li>img-src : 这个配置对所有图片和favicons起效</li>
<li>media-src : 这个配置对所有的 &lt;audio&gt; 和 &lt;video &gt; 标签引用的资源起效</li>
<li>frame-src : 这个配置对所有的 &lt;frame&gt; 和 &lt;iframe&gt; 标签引用的资源起效</li>
<li>font-src : 这个配置对@font-face 应用的资源起效</li>
<li>connect-src : 这个配置对XMLHttpRequest 请求的资源起效</li>
<li>style-src : 这个配置对 &lt;style &gt; 标签引用的资源起效</li>
<li>report-uri ： 这个配置用于指定一个url , 在检测到违反Chrome extension CSP配置的时候进行信息上报。

<blockquote><p>report 上报的信息有：</p>

<blockquote><ul>
<li>document-uri : 违反规则的页面URI</li>
</ul>
</blockquote></blockquote></li>
<li>referrer : 违反规则的页面的referrer</li>
<li>blocked-uri : 违反规则的请求链接uri</li>
<li>violated-directive : 违反的规则名称</li>
</ul>
</blockquote>

<h3>开发时对于CSP的注意事项</h3>

<blockquote><p>在开发的过程中也因为CSP的限制遇到了一些问题, 首先是在开发YY音乐台的过程中，之前制定好的方法是将YY音乐台整个打包到扩展之中，但是由于CSP的限制，其中的音频，视频的flash资源都不能通过外部接口去请求，由于各种原因音频视频的资源无法使用https的服务,最后采用的折中策略就是将YY音乐台部署在线上，需要和浏览器交互的部分使用 content_script 进行注入控制进行交互，这样做绕过了CSP的限制，但是由于是一个线上的Web应用程序，在开发过程中做出浏览器兼容性的调整，而且由于线上更新和浏览器版本的更新存在时间差 , 还要对浏览器扩展的版本做出兼容 , 所以在开发的时候需要权衡各方面的开发成本。</p>

<p>如果确实需要应用外部的http的资源，其实还有个比较绕弯的方法，就是通过ajax请求将资源请求回来，然后用过 chrome.tabs.executescript 或者 chrome.tabs.insertCSS 进行资源插入 , 从而到达运行的目的 (不知道这算不算是一个Chrome extension 权限策略的漏洞= =)</p></blockquote>
]]></content>
  </entry>
  
</feed>
