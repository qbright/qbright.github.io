<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[光域]]></title>
  <link href="http://qbright.github.io/atom.xml" rel="self"/>
  <link href="http://qbright.github.io/"/>
  <updated>2014-12-08T16:46:46+08:00</updated>
  <id>http://qbright.github.io/</id>
  <author>
    <name><![CDATA[zqbright]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone源码学习 --- Backbone.View]]></title>
    <link href="http://qbright.github.io/blog/2014/12/08/backbone.View/"/>
    <updated>2014-12-08T15:38:34+08:00</updated>
    <id>http://qbright.github.io/blog/2014/12/08/backbone.View</id>
    <content type="html"><![CDATA[<p>前面已经对backbone中的Event、Model、Collection代码进行了分析，现在我们来看下MVC中的<code>V</code>部分，也就是<code>Backbone.View</code>，View在Backbone中主要用于沟通页面中的DOM和<code>Backbone.Model/Collection</code>，页面的逻辑操作，DOM事件的绑定等，View部分的代码非常简答，加上注释只有110左右。
View部分有一下API：</p>

<p><img src="https://raw.githubusercontent.com/qbright/post/master/image/20141208155302.png" alt="" /></p>

<!-- more -->


<p>方法不多，下面对部分API进行介绍:</p>

<h4>构造方法</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">var</span> <span class="nx">viewOptions</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;model&#39;</span><span class="p">,</span> <span class="s1">&#39;collection&#39;</span><span class="p">,</span> <span class="s1">&#39;el&#39;</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;attributes&#39;</span><span class="p">,</span> <span class="s1">&#39;className&#39;</span><span class="p">,</span> <span class="s1">&#39;tagName&#39;</span><span class="p">,</span> <span class="s1">&#39;events&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">View</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">cid</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(</span><span class="s1">&#39;view&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">options</span> <span class="o">||</span> <span class="p">(</span><span class="nx">options</span> <span class="o">=</span> <span class="p">{});</span>
</span><span class='line'>      <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">pick</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">viewOptions</span><span class="p">));</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_ensureElement</span><span class="p">();</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">delegateEvents</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>构造方法中为View生成了一个唯一的cid,以&#8217;view&#8217;开头,然后进行对目标属性viewOptions进行合并，接着调用<code>_ensureElement</code>判断el的情况，接着调用<code>delegateEvents</code>进行方法绑定，初始化完成 。</p>

<h4>delegateEvents</h4>

<p><code>view.setElement(element)</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>     <span class="nx">setElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">delegate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">undelegateEvents</span><span class="p">();</span><span class="c1">//如果已经存在this.$el，进行事件解绑</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//对$el进行赋值，本质是一个jquery或者是 Lo-Dash and Zepto 对象</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$el</span> <span class="o">=</span> <span class="nx">element</span> <span class="k">instanceof</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">$</span> <span class="o">?</span> <span class="nx">element</span> <span class="o">:</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//把dom element 赋值给el</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//如果没有显式传值,则进行事件绑定</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">delegate</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">delegateEvents</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>setElement</code>方法用于设置<code>View</code>对应的<code>element</code> , 这个方法在<code>new</code>的时候会被调用， 如果想要在使用过程中改变<code>View</code>的<code>dom</code>元素指向，可调用这个方法进行重新设置</p>

<h4>_ensureElement</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">_ensureElement</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//如果已经对el进行设置，直接调用setElement方法</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span><span class="c1">//如果没有设置，生成一个元素对象，再调用setElement方法</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;attributes&#39;</span><span class="p">));</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="p">)</span> <span class="nx">attrs</span><span class="p">[</span><span class="s1">&#39;class&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;className&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">$el</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;&#39;</span> <span class="o">+</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;tagName&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="nx">attrs</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">setElement</span><span class="p">(</span><span class="nx">$el</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">setElement</span><span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;el&#39;</span><span class="p">),</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_ensureElement</code>这个方法是内部方法，在构造函数中使用，用于判断指定的<code>el</code>在页面中存不存在，如果存在则对<code>$el</code>进行赋值，如果不存在，则生成一个<code>$el</code>,但是要注意这个对象是没有落地到<code>dom</code>树中的 。</p>

<h4>delegateEvents</h4>

<p><code>delegateEvents([events])</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>       <span class="c1">// *{&quot;event selector&quot;: &quot;callback&quot;}*</span>
</span><span class='line'>      <span class="c1">//</span>
</span><span class='line'>      <span class="c1">//     {</span>
</span><span class='line'>      <span class="c1">//       &#39;mousedown .title&#39;:  &#39;edit&#39;,</span>
</span><span class='line'>      <span class="c1">//       &#39;click .button&#39;:     &#39;save&#39;,</span>
</span><span class='line'>      <span class="c1">//       &#39;click .open&#39;:       function(e) { ... }</span>
</span><span class='line'>      <span class="c1">//     }</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">delegateEvents</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">events</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//如果不存在events,则直接返回</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">events</span> <span class="o">||</span> <span class="p">(</span><span class="nx">events</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;events&#39;</span><span class="p">))))</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>            <span class="c1">//先解除所有的事件绑定</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">undelegateEvents</span><span class="p">();</span>
</span><span class='line'>      
</span><span class='line'>            <span class="c1">//处理每个事件</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">events</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">events</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>              <span class="c1">//解析回调函数</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">method</span><span class="p">))</span> <span class="nx">method</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">events</span><span class="p">[</span><span class="nx">key</span><span class="p">]];</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">method</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>              <span class="c1">//对选择器进行分析</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">key</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">delegateEventSplitter</span><span class="p">);</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">eventName</span> <span class="o">=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">selector</span> <span class="o">=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>              <span class="nx">method</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>              <span class="c1">//绑定的事件名都是以 eventName + &#39;.delegateEvents&#39; + cid 组成,</span>
</span><span class='line'>              <span class="c1">//这么做能够在undelegateEvents的时候选择到这个View的所有事件</span>
</span><span class='line'>              <span class="nx">eventName</span> <span class="o">+=</span> <span class="s1">&#39;.delegateEvents&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">cid</span><span class="p">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">selector</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">method</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">selector</span><span class="p">,</span> <span class="nx">method</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在View中你可以使用一个 key:value 集合指定对应的事件，在初始化的时候构造函数会调用delegateEvents进行绑定，需要注意的是所有在key中指定的元素的父元素都必须是$el,也就是说元素必须是$el的子节点，否则绑定失败。</p>

<p>View和其他backbone模块一个区别就是没有自己的内建自定义事件，当然他也组合了Events模块，但是所有的事件都需要自己进行建立。View主要是一个MVC模型的承载，其实真正的功能不多，其实从模型层面上看V在前端开发中是最接近业务逻辑的，所以在View中大部分的逻辑都是开发者自己去扩展的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone源码学习 --- Backbone.Collection]]></title>
    <link href="http://qbright.github.io/blog/2014/12/08/backbone.Collectioin/"/>
    <updated>2014-12-08T12:12:04+08:00</updated>
    <id>http://qbright.github.io/blog/2014/12/08/backbone.Collectioin</id>
    <content type="html"><![CDATA[<p>今天我们继续来说说Backbone MVC中的 <code>M</code>，如果说前面介绍的<code>Backbone.Model</code>像是数据库中的一条记录的抽象的话，那么今天要聊的<code>Backbone.Collection</code> 就像是由若干条<code>Backbone.Model</code>组成的一个数据库表，其api和使用方法和<code>Backbone.Model</code>相似，主要是对models集合进行操作，以下为<code>Backbone.Collection</code>提供的API:</p>

<!-- more -->


<p><img src="https://raw.githubusercontent.com/qbright/post/master/image/20141208124431.png" alt="" /></p>

<p>我们可以看到很多api和<code>Backbone.Model</code> 的方法是相同的，主要是用于操作数据，进行数据定位等等，方法有：</p>

<ul>
<li>set：作为所有数据操作的基类方法，通过options确定具体的操作，主要是对models 集合进行add，remove,merge等操作，默认操作是将传入的models替换原有的models，不进行合并</li>
<li>add：封装了set方法，传入的配置默认是<code>remove:false</code>，将存入的models添加到原有的models中去</li>
<li>remove：删除传入的models,如果传入的model不存在，则为空操作，删除之后触发 <code>remove</code> 事件</li>
<li>reset : 删除原来的models集合 ，将传入的models进行设置，不触发<code>add/remove</code>事件，在完成之后触发<code>reset</code>事件</li>
<li>get ： 通过传入的参数返回特定的model（参数可以是obj/id/cid）;</li>
</ul>


<p>下面我们来看看几个主要的API：</p>

<h4>set</h4>

<p><code>collection.set(models, [options])</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="c1">//set/add操作中传入set 的默认option</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">setOptions</span> <span class="o">=</span> <span class="p">{</span><span class="nx">add</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">remove</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">merge</span><span class="o">:</span> <span class="kc">true</span><span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">addOptions</span> <span class="o">=</span> <span class="p">{</span><span class="nx">add</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">remove</span><span class="o">:</span> <span class="kc">false</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">options</span><span class="p">){</span>
</span><span class='line'>         <span class="c1">//各种属性设置</span>
</span><span class='line'>            <span class="nx">options</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({},</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">setOptions</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//parse 解析models</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parse</span><span class="p">)</span> <span class="nx">models</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//判断是否是当个model,如果是则返回一个[model]</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">singular</span> <span class="o">=</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">models</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">models</span> <span class="o">=</span> <span class="nx">singular</span> <span class="o">?</span> <span class="p">(</span><span class="nx">models</span> <span class="o">?</span> <span class="p">[</span><span class="nx">models</span><span class="p">]</span> <span class="o">:</span> <span class="p">[])</span> <span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">models</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>        <span class="c1">// 各种options 的判断</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">l</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">existing</span><span class="p">,</span> <span class="nx">sort</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// 如果传入了at属性，则会在插入的时候插入到at指定的models的位置</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">at</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">at</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">targetModel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//如果comparator不为空,没有指定at,sort不为false,则这次set操作将进行排序</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">sortable</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">comparator</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">at</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">sort</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">sortAttr</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isString</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comparator</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">comparator</span> <span class="o">:</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">//设置各个操作的临时存储集合</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">toAdd</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">toRemove</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">modelMap</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">add</span><span class="p">,</span> <span class="nx">merge</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">merge</span><span class="p">,</span> <span class="nx">remove</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">remove</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">order</span> <span class="o">=</span> <span class="o">!</span><span class="nx">sortable</span> <span class="o">&amp;&amp;</span> <span class="nx">add</span> <span class="o">&amp;&amp;</span> <span class="nx">remove</span> <span class="o">?</span> <span class="p">[]</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//开始对传入的models进行处理，但是只是对models进行分类，传入到各个临时存储集合中去</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">models</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">models</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//获取model的id</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">attrs</span> <span class="k">instanceof</span> <span class="nx">Model</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//是否为 Backbone.Model (没有设置model)</span>
</span><span class='line'>          <span class="nx">id</span> <span class="o">=</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">id</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">[</span><span class="nx">targetModel</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">idAttribute</span> <span class="o">||</span> <span class="s1">&#39;id&#39;</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//判断是否已经存在</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">existing</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">id</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">remove</span><span class="p">)</span> <span class="nx">modelMap</span><span class="p">[</span><span class="nx">existing</span><span class="p">.</span><span class="nx">cid</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">//如果 remove 为true,加入modelMap</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">merge</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//merge 为true, 对model中的attribute 进行设置</span>
</span><span class='line'>            <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">attrs</span> <span class="o">===</span> <span class="nx">model</span> <span class="o">?</span> <span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">:</span> <span class="nx">attrs</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parse</span><span class="p">)</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">existing</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">existing</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span><span class="c1">//调用model中的set方法，进行数据合并</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">sortable</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">sort</span> <span class="o">&amp;&amp;</span> <span class="nx">existing</span><span class="p">.</span><span class="nx">hasChanged</span><span class="p">(</span><span class="nx">sortAttr</span><span class="p">))</span> <span class="nx">sort</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nx">models</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">existing</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">add</span><span class="p">)</span> <span class="p">{</span><span class="c1">//若不存在则判断add属性，存入到toAdd 中</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//调用_prepareModel生成一个model</span>
</span><span class='line'>          <span class="nx">model</span> <span class="o">=</span> <span class="nx">models</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_prepareModel</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">model</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">toAdd</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span> <span class="c1">//添加入toAdd</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">_addReference</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span><span class="err">；</span> <span class="c1">//建立与collection的关联</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">model</span> <span class="o">=</span> <span class="nx">existing</span> <span class="o">||</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">order</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">isNew</span><span class="p">()</span> <span class="o">||</span> <span class="o">!</span><span class="nx">modelMap</span><span class="p">[</span><span class="nx">model</span><span class="p">.</span><span class="nx">id</span><span class="p">]))</span> <span class="nx">order</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">modelMap</span><span class="p">[</span><span class="nx">model</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>    <span class="c1">//添加model 处理 </span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">toAdd</span><span class="p">.</span><span class="nx">length</span> <span class="o">||</span> <span class="p">(</span><span class="nx">order</span> <span class="o">&amp;&amp;</span> <span class="nx">order</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">sortable</span><span class="p">)</span> <span class="nx">sort</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">+=</span> <span class="nx">toAdd</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="c1">//更新length的值</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">at</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span><span class="c1">//如果at值不为空，则插入到对应的索引位置</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">toAdd</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">at</span> <span class="o">+</span> <span class="nx">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">toAdd</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="c1">//否则使用push向后插入，如果order不为空，则使用order替换整个models</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">order</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">orderedModels</span> <span class="o">=</span> <span class="nx">order</span> <span class="o">||</span> <span class="nx">toAdd</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">orderedModels</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">models</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">orderedModels</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">sort</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">sort</span><span class="p">({</span><span class="nx">silent</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span> <span class="c1">// 排序</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">//触发 响应的事件</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">silent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">toAdd</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">(</span><span class="nx">model</span> <span class="o">=</span> <span class="nx">toAdd</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;add&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">sort</span> <span class="o">||</span> <span class="p">(</span><span class="nx">order</span> <span class="o">&amp;&amp;</span> <span class="nx">order</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span> <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;sort&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">singular</span> <span class="o">?</span> <span class="nx">models</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">models</span><span class="p">;</span>         
</span><span class='line'>  
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>set方法中通过对options的remove,add,merge进行设置，进行不同的行为操作，如果remove是<code>true</code>的话，其值将被设置入<code>order</code>中，在<code>line:79</code> 进行整个<code>models</code>的替换,如果是remove是<code>false</code>,则将set 的值加入<code>toAdd</code>中。Backbone.Collection中很多方法都是以set为基础方法的，如 <code>add</code>方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">add</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="nx">merge</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">addOptions</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>_addReference</h4>

<p>_addReference 方法为内部方法，主要用于在model和对应的collection建立关系，在collection的<code>_byId</code>集合中加入对应<code>cid</code>和<code>id</code>的model映射，将model的<code>collection</code>属性设置为当前的collection 。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">_addReference</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="p">[</span><span class="nx">model</span><span class="p">.</span><span class="nx">cid</span><span class="p">]</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">id</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">_byId</span><span class="p">[</span><span class="nx">model</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">model</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">model</span><span class="p">.</span><span class="nx">collection</span><span class="p">)</span> <span class="nx">model</span><span class="p">.</span><span class="nx">collection</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_onModelEvent</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了set方法，其他的方法和Backbone.Model中的方法从逻辑，机制都差不多，都是一个 <code>操作 --&gt; 触发事件</code>的过程。只有少数差别，比如<code>fetch</code>方法 ，在options中有个<code>reset</code>配置，可以对获取的数据进行一个覆盖操作。而<code>Backbone.Collection</code>中没有<code>save</code>方法，取而代之的是一个<code>create</code>方法，就是调用了model中的<code>save</code>方法，但是细细推敲，在collection中使用<code>create</code>这个名字确实比较准确</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone源码学习 --- Backbone.Model]]></title>
    <link href="http://qbright.github.io/blog/2014/12/04/backbone.Model/"/>
    <updated>2014-12-04T14:45:04+08:00</updated>
    <id>http://qbright.github.io/blog/2014/12/04/backbone.Model</id>
    <content type="html"><![CDATA[<p>今天我们来谈谈Backbone.js MVC 中的 <code>M</code> , Model是backbone的核心部分，包含着页面展示内容的数据，还有围绕着数据操作的各种 转换，校验，计算 ，权限控制，服务端交互等等操作，你可以通过 <code>Backbone.Model.extend()</code> 生成你的model , 当然生成的model也可以作为一个基类去向下扩展更多的model</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">var</span> <span class="nx">People</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Man</span> <span class="o">=</span> <span class="nx">People</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>Backbone.Model Api</h3>

<p>Backbone.Model 提供了大量方法用于实现一个Model的基本操作，当然其中最基本的还是基于 <code>Backbone.Events</code> 的事件机制，在Model的attributes发生变化的时候，相应的 <code>change:attr</code>事件会被触发，下面是提供的API:</p>

<p><img src="https://raw.githubusercontent.com/qbright/post/master/image/20141205165058.png" alt="" /></p>

<p>其中有对数据进行服务端操作的方法：</p>

<ul>
<li>sync   :  包装了<code>Backbone.sync</code>，<code>xhr</code>的基类</li>
<li>fetch  :  用于从服务端获取数据</li>
<li>save   ： 向服务端持久化数据</li>
<li>destroy： 从服务端删除数据</li>
</ul>


<p>model中数据操作的方法：</p>

<ul>
<li>get ： 从<code>attributes</code>中获取数据</li>
<li>set ： 向<code>attributes</code>中设置数据</li>
<li>escape : 对数据进行编码 ，使用的是<code>underscore</code>的 <code>_.escape</code></li>
<li>has : <code>attributes</code>中有无对应数据</li>
<li>unset : 从<code>attributes</code>中删除数据</li>
<li>clear : 清空<code>attributes</code>数据</li>
<li>changed : 与上个状态（执行过<code>set</code>，<code>unset</code>），相比变化的值</li>
<li>toJSON ： 将 <code>attributes</code> 序列化成一个对象</li>
<li>parse : 当设置项<code>parse</code>为真的时候，初始化<code>/set/unset/fetch</code>等数据操作中会对目标数据进行一个解析返回解析后的对象，此方法为空方法，需要重写覆盖</li>
<li>hasChanged : 与上个状态(执行过<code>set</code>,<code>unset</code>),相比是否发生过变化</li>
<li>changeAttributes : 与上个状态(执行过<code>set</code>,<code>unset</code>),相比发生的所有值</li>
<li>previous : 前一状态 (执行过<code>set</code>,<code>unset</code>)，该属性对应的值</li>
<li>previousAttributes : 与上个状态(执行过<code>set</code>,<code>unset</code>),发生过变化对象的前一个状态的所有值</li>
</ul>


<p>model中数据校验的方法：</p>

<ul>
<li>validate：用于对<code>model</code>中数据进行校验，需要重写覆盖默认方法</li>
<li>validationError : 返回最近一个<code>invalid</code>时返回的值</li>
<li>isValid ： 调用<code>_validate</code>方法</li>
</ul>


<p>下面会针对一些重点的api进行讲解：</p>

<h4>构造函数</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Model</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">attributes</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>          <span class="nx">options</span> <span class="o">||</span> <span class="p">(</span><span class="nx">options</span> <span class="o">=</span> <span class="p">{});</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">cid</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">uniqueId</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">collection</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">collection</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parse</span><span class="p">)</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>          <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">defaults</span><span class="p">({},</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">_</span><span class="p">.</span><span class="nx">result</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;defaults&#39;</span><span class="p">));</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">changed</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>构造函数主要对初始化的数据和选项进行设置，然后会对生成一个唯一的<code>cid</code>用于标示<code>model</code>,如果<code>options</code>中的<code>parse</code>为<code>true</code>,那么会对初始化数值通过<code>parse</code>方法进行一个解析，调用<code>set</code>方法，所有的初始值会被存入<code>attributes</code>中，调用<code>initialize</code>初始化方法 。<code>model</code>的初始化就完成了。</p>

<h4>set</h4>

<p> <code>model.set(attributes, [options])</code></p>

<p><code>set</code>方法会将值设置进入<code>attribute</code>中，设置时如果设置了<code>slient</code>为<code>true</code>,会触发相应的 <code>change:attr</code> 的事件，最后统一触发<code>change</code>事件，set方法部分代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//......</span>
</span><span class='line'>
</span><span class='line'>           <span class="c1">// key值可以是键值对，也可以是一个字符串,将赋值传入attrs属性中   </span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">key</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">attrs</span> <span class="o">=</span> <span class="nx">key</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">options</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">(</span><span class="nx">attrs</span> <span class="o">=</span> <span class="p">{})[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// ....</span>
</span><span class='line'>
</span><span class='line'>       <span class="c1">//对设置的值进行校验 </span>
</span><span class='line'>           <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_validate</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">))</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>       <span class="nx">unset</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">unset</span><span class="p">;</span> <span class="c1">// unset为true时会删除设置的值,unset方法就是通过 set(key,val,{unset:true})去实现的</span>
</span><span class='line'>      
</span><span class='line'>       <span class="c1">//当对象正在被被设置的时候，不给 previousAttributes 赋值</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">changing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">_previousAttributes</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">changed</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>        <span class="nx">current</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">prev</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_previousAttributes</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>        <span class="c1">//如果对Id进行了设置，则对对象的id属性也进行改变</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">idAttribute</span> <span class="k">in</span> <span class="nx">attrs</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">idAttribute</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>        <span class="c1">//进行 设置或者是删除操作</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">attr</span> <span class="k">in</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">val</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">[</span><span class="nx">attr</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEqual</span><span class="p">(</span><span class="nx">current</span><span class="p">[</span><span class="nx">attr</span><span class="p">],</span> <span class="nx">val</span><span class="p">))</span> <span class="nx">changes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">attr</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isEqual</span><span class="p">(</span><span class="nx">prev</span><span class="p">[</span><span class="nx">attr</span><span class="p">],</span> <span class="nx">val</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">changed</span><span class="p">[</span><span class="nx">attr</span><span class="p">]</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span><span class="c1">//为model的changed进行设置</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">changed</span><span class="p">[</span><span class="nx">attr</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nx">unset</span> <span class="o">?</span> <span class="k">delete</span> <span class="nx">current</span><span class="p">[</span><span class="nx">attr</span><span class="p">]</span> <span class="o">:</span> <span class="nx">current</span><span class="p">[</span><span class="nx">attr</span><span class="p">]</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span><span class="c1">//如果unset被设置成true了，则进行删除操作</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>        <span class="c1">//在silent不为false 的情况下，进行change:attr事件发送</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">silent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">changes</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">_pending</span> <span class="o">=</span> <span class="nx">options</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">changes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;change:&#39;</span> <span class="o">+</span> <span class="nx">changes</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="k">this</span><span class="p">,</span> <span class="nx">current</span><span class="p">[</span><span class="nx">changes</span><span class="p">[</span><span class="nx">i</span><span class="p">]],</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>        <span class="c1">//触发change事件</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">changing</span><span class="p">)</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">silent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_pending</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">options</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_pending</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_pending</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_pending</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">_changing</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>set</code>的整个流程就是 对传入的数值进行处理，变成一个键值对，然后对数值进行校验，检查正确性，然后开始进行设置操作，设置时检查数值时候是发生改变的，如果有则加入一个 <code>changeed</code>的对象中，然后检查<code>unset</code>的值，进行相应的添加更新删除操作。然后依次触发<code>change:attr</code>和<code>change</code>事件。</p>

<h4>save</h4>

<p><code>model.save([attributes], [options])</code></p>

<p>save方法用于向客户端持久化数据，会根据数据的不同和配置的不同选择使用create,update或者是patch,并且触发 sync 事件，以下为部分代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="nx">save</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>          
</span><span class='line'>       <span class="c1">// ......</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'>        <span class="c1">//当设置了wait属性true的时候 ,  save方法先不执行set方法(不触发change事件),只执行validate</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">attrs</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">options</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">))</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_validate</span><span class="p">(</span><span class="nx">attrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">))</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//如果wait为true,设置this.attributes</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">attrs</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">attributes</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>        <span class="c1">// .....</span>
</span><span class='line'>      
</span><span class='line'>        <span class="kd">var</span> <span class="nx">model</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">success</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">success</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">options</span><span class="p">.</span><span class="nx">success</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Ensure attributes are restored during synchronous saves.</span>
</span><span class='line'>          <span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">=</span> <span class="nx">attributes</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">serverAttrs</span> <span class="o">=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">resp</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>          <span class="c1">//如果wait为true , 那么会在请求返回之后才进行set操作</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span> <span class="nx">serverAttrs</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">attrs</span> <span class="o">||</span> <span class="p">{},</span> <span class="nx">serverAttrs</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">serverAttrs</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">serverAttrs</span><span class="p">,</span> <span class="nx">options</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">success</span><span class="p">)</span> <span class="nx">success</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>          <span class="c1">//触发 sync 事件</span>
</span><span class='line'>          <span class="nx">model</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;sync&#39;</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//生成XHR onerror 回调函数</span>
</span><span class='line'>        <span class="nx">wrapError</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">//选择方法</span>
</span><span class='line'>        <span class="nx">method</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">isNew</span><span class="p">()</span> <span class="o">?</span> <span class="s1">&#39;create&#39;</span> <span class="o">:</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">patch</span> <span class="o">?</span> <span class="s1">&#39;patch&#39;</span> <span class="o">:</span> <span class="s1">&#39;update&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">method</span> <span class="o">===</span> <span class="s1">&#39;patch&#39;</span><span class="p">)</span> <span class="nx">options</span><span class="p">.</span><span class="nx">attrs</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">xhr</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sync</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>        <span class="c1">// Restore attributes.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">attrs</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">wait</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">=</span> <span class="nx">attributes</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//返回xhr对象</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">xhr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p><code>save</code> 中最需要注意的就是 <code>wait</code> 的设置，当<code>wait</code>为真的时候，<code>save</code>返回会在<code>xhr</code>返回之后再执行<code>set</code>操作，而不是在<code>xhr</code>之前就进行<code>set</code>操作，因此<code>change</code>事件的触发时机也就不同了。</p>

<p>之前说过整个Backbone都是通过事件串联起来的，所以对于事件触发时机的了解和把握是非常重要的，不然会在开发过程中导致一些奇怪的问题出现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone源码学习 --- Backbone.Events]]></title>
    <link href="http://qbright.github.io/blog/2014/12/04/backbone.Events/"/>
    <updated>2014-12-04T14:45:04+08:00</updated>
    <id>http://qbright.github.io/blog/2014/12/04/backbone.Events</id>
    <content type="html"><![CDATA[<p>Backbone.Events为Backbone的核心部分，它在backbone的其他部分（View、Controller、Model &hellip;）被使用，在Backbone的MVC中作为Controller存在，通过事件机制对数据和视图进行控制。</p>

<!-- more -->


<h3>backbone.Events的作用</h3>

<p>Events 可以作为一个模块在其他的对象中使用(无论是不是Backbone中定义的),也可以被单独使用<code>var event = {};_.extend(event,Backbone.Events)</code>;</p>

<h3>Events api</h3>

<p>Events 对象提供了以下api</p>

<p><img src="https://raw.githubusercontent.com/qbright/post/master/image/7d62a9bfd5472b586953a2412a2e27b1a0ba300aa178-c16rEa_fw658.png" alt="" /></p>

<p>所有的方法调用会返回events对象</p>

<p><img src="https://raw.githubusercontent.com/qbright/post/master/image/0894846c47f2626fb4c5e7e4e3e9637634ec0c172b80-Zq9uqV_fw658.png" alt="" /></p>

<p>其中除了各种方法之外，会有一个 <code>_events</code>属性存储所有该Events对象中绑定的自定义事件，每个事件包含一个数组，里面存储着所有这个事件名称上定义的回调函数，结构如下：</p>

<p><img src="https://raw.githubusercontent.com/qbright/post/master/image/0894846c47f2626fb4c5e7e4e3e9637634ec0c172b80-Zq9uqV_fw658.png" alt="" /></p>

<p>其中 <code>callback</code> 为回调函数 , <code>context</code>为调用回调函数<code>this</code>指向的域 , <code>ctx</code> 为 events对象。</p>

<p>下面我们分析下方法的调用过程：</p>

<h4>on</h4>

<p><code>object.on(event,callback,[context]) Alias:bind</code></p>

<p><code>on</code>方法用于绑定一个事件，在事件被触发的时候，绑定的回调函数会被触发，类似于DOM元素的事件机制，当然<code>backbone</code>支持自定义事件。下面我们看看<code>on</code>的实现代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="nx">on</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">eventsApi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;on&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="p">[</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">context</span><span class="p">])</span> <span class="o">||</span> <span class="o">!</span><span class="nx">callback</span><span class="p">)</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_events</span> <span class="o">||</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span> <span class="o">=</span> <span class="p">{});</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">events</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]);</span>
</span><span class='line'>      <span class="nx">events</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">callback</span><span class="o">:</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">context</span><span class="o">:</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">ctx</span><span class="o">:</span> <span class="nx">context</span> <span class="o">||</span> <span class="k">this</span><span class="p">});</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当调用<code>on</code>方法的时候，方法会先调用 <code>eventApi</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   <span class="kd">var</span> <span class="nx">eventsApi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">action</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">rest</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">name</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">// Handle event maps.</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">name</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">obj</span><span class="p">[</span><span class="nx">action</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">[</span><span class="nx">key</span><span class="p">,</span> <span class="nx">name</span><span class="p">[</span><span class="nx">key</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">rest</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="c1">// Handle space separated event names.</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">eventSplitter</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="nx">name</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">eventSplitter</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">names</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">obj</span><span class="p">[</span><span class="nx">action</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">[</span><span class="nx">names</span><span class="p">[</span><span class="nx">i</span><span class="p">]].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">rest</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到主要是用于检测有没有一次绑定多个事件 如： <code>object.on("event1 event2"，function(){})</code>、或者 <code>object.on({"event1":function(){},"event2":function(){}})</code>，如果是这种绑定事件的话，eventsApi将会对多个事件进行分解，分别调用 <code>on</code> 事件进行绑定。</p>

<p>加下去会判断有没有内部的<em>events属性，没有的话创建一个<code>object</code>，然后再判断有没有</em>events属性中有没有对应事件名，如果没有创建一个数组，然后push进去事件，返回一个Events对象，完成绑定。</p>

<h4>once</h4>

<p><code>object.once(event,callback, [context])</code></p>

<p><code>once</code>方法类似于<code>on</code>方法,区别在于使用 <code>once</code>绑定的事件只会执行一次，原因在于 <code>once</code> 方法中存在一个包装器，将回调函数进行了二次的封装，如下下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">once</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">once</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到<code>callback</code>在被调用前先执行了<code>off</code>方法 ，解除事件的绑定，因此只能执行一次</p>

<h4>off</h4>

<p><code>object.on([event],[callback],[context]) Alias unbind</code></p>

<p><code>off</code>方法主要用于事件的解除，实现代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>     <span class="nx">off</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">retain</span><span class="p">,</span> <span class="nx">ev</span><span class="p">,</span> <span class="nx">events</span><span class="p">,</span> <span class="nx">names</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">l</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">k</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span> <span class="o">||</span> <span class="o">!</span><span class="nx">eventsApi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;off&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="p">[</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">context</span><span class="p">]))</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">name</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">callback</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">_events</span> <span class="o">=</span> <span class="k">void</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">names</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">?</span> <span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">names</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">name</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">events</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">name</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">retain</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">callback</span> <span class="o">||</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">events</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">k</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">ev</span> <span class="o">=</span> <span class="nx">events</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">((</span><span class="nx">callback</span> <span class="o">&amp;&amp;</span> <span class="nx">callback</span> <span class="o">!==</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">callback</span> <span class="o">&amp;&amp;</span> <span class="nx">callback</span> <span class="o">!==</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">callback</span><span class="p">.</span><span class="nx">_callback</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>                    <span class="p">(</span><span class="nx">context</span> <span class="o">&amp;&amp;</span> <span class="nx">context</span> <span class="o">!==</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">context</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">retain</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ev</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">retain</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>进入函数之后会对是否解除多个事件调用 <code>eventsApi</code> 进行检查（类似 <code>on</code>），接着检查有没有传入 <code>name</code> 、<code>callback</code> 、<code>context</code>，如果都没有，着直接将<code>_events</code>属性置空，解绑完成 。
如果存在以上参数，则检查<code>name</code>属性，如果没有则将所有的events中的事件名赋值给<code>names</code>， 然后循环检查 <code>callback</code>，如果不存在<code>callback</code>或者 <code>context</code>，则直接删除相关事件，如果存在这判断<code>callback</code>或者 <code>context</code>是否和对应的事件的<code>callback</code>或者 <code>context</code>相同，则重新建事件加回去。</p>

<p>这个删除的流程是先删除，然后在判断，如果符合条件再加回来。</p>

<h4>trigger</h4>

<p><code>object.trigger(event,[*args])</code></p>

<p><code>trigger</code>方法主要用于将绑定好的事件进行触发，代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>   
</span><span class='line'>  <span class="nx">trigger</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">)</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">eventsApi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;trigger&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">args</span><span class="p">))</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">events</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">allEvents</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">.</span><span class="nx">all</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">events</span><span class="p">)</span> <span class="nx">triggerEvents</span><span class="p">(</span><span class="nx">events</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">allEvents</span><span class="p">)</span> <span class="nx">triggerEvents</span><span class="p">(</span><span class="nx">allEvents</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<code>trigger</code>方法首先对参数进行分割 , 将自定义参数的放入 <code>args</code> 中 , 然后进行 <code>eventApi</code> 检查,再从<code>_events</code>中 获取对应的事件，再获取 <code>all</code>事件，然后进行触发调用 <code>triggerEvents</code>, 代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>    <span class="kd">var</span> <span class="nx">triggerEvents</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">events</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">ev</span><span class="p">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">events</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">a1</span> <span class="o">=</span> <span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">a2</span> <span class="o">=</span> <span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">a3</span> <span class="o">=</span> <span class="nx">args</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>      <span class="k">switch</span> <span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">)</span> <span class="p">(</span><span class="nx">ev</span> <span class="o">=</span> <span class="nx">events</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">ctx</span><span class="p">);</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">)</span> <span class="p">(</span><span class="nx">ev</span> <span class="o">=</span> <span class="nx">events</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">a1</span><span class="p">);</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">)</span> <span class="p">(</span><span class="nx">ev</span> <span class="o">=</span> <span class="nx">events</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">a1</span><span class="p">,</span> <span class="nx">a2</span><span class="p">);</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">)</span> <span class="p">(</span><span class="nx">ev</span> <span class="o">=</span> <span class="nx">events</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">a1</span><span class="p">,</span> <span class="nx">a2</span><span class="p">,</span> <span class="nx">a3</span><span class="p">);</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span> <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">)</span> <span class="p">(</span><span class="nx">ev</span> <span class="o">=</span> <span class="nx">events</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">callback</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">ev</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>       <br/>
从中可以出在自定义参数小于等于三个的时候，使用call,超过三个参数才使用apply进行调用，代码中的注释是这么去解释的：</p>

<pre><code>A difficult-to-believe, but optimized internal dispatch function for
triggering events. Tries to keep the usual cases speedy (most internal
Backbone events have 3 arguments)
</code></pre>

<p>大概就是说这么做是为了做一个优化，保持通畅情况下的代码执行速度</p>

<hr />

<p>上面就是对Events对象进行总结，可以看出Events对象从api看是非常简单的，但是它缺链接这backbone的方方面面，下面我们的讲的其他Backbone模块中其实都能看到Events的身影，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone源码学习 --- 简介]]></title>
    <link href="http://qbright.github.io/blog/2014/12/03/backbone/"/>
    <updated>2014-12-03T16:46:22+08:00</updated>
    <id>http://qbright.github.io/blog/2014/12/03/backbone</id>
    <content type="html"><![CDATA[<p>开始对前端的MVC框架 <a href="http://backbonejs.org/">Backbone.js</a>进行学习，会从Event、Model、Collection、View等几个模块进行解析和源码阅读。</p>

<!-- more -->


<h3>目录</h3>

<ol>
<li><a href="http://qbright.github.io/blog/2014/12/04/backbone.Events/">Backbone.Event</a></li>
<li><a href="http://qbright.github.io/blog/2014/12/04/backbone.Model/">Backbone.Model</a></li>
<li><a href="http://qbright.github.io/blog/2014/12/08/backbone.Collectioin/">Backbone.Collection</a></li>
<li><a href="http://qbright.github.io/blog/2014/12/08/backbone.View/">Backbone.View</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chrome.webRequest 研究]]></title>
    <link href="http://qbright.github.io/blog/2014/07/31/chrome.webRequest/"/>
    <updated>2014-07-31T19:07:23+08:00</updated>
    <id>http://qbright.github.io/blog/2014/07/31/chrome.webRequest</id>
    <content type="html"><![CDATA[<p>今天说下 <strong>chrome.webRequest</strong> 的 api 用法， 这个api主要用于处理网络的请求，对应到特定情境中对特定匹配的网络请求进行分析处理，<strong>chrome.webRequest</strong> api 由<strong>九个事件</strong>组成，这九个事件是一个网络请求生命周期中的九个不同的阶段，可以说控制的粒度已经很细，基本可以覆盖到特定的时间点。这套api提供了很强大的请求控制功能，因此如果代码有问题，那么后果可能相当严重，在配置<strong>manifest.json</strong> 的<strong>permission</strong>时要注意，最好能够指定到特定的url规则中去，而不是 <code>http://\*\*/\*</code>和<code>https：//\*\*/\*</code>,这样如果代码出现逻辑错误，那么可能整个浏览器就不能用了，比如你把所有的url都重定向到 一个错误的url去，那么你的浏览器就呵呵了。</p>

<!-- more -->


<p>下面是这九个事件的关系图：
    <img src="http://fed.yy.com/wp-content/uploads/2014/07/9ab65b5eb36af14389b63f4f828b7ccdc9e5074b8356-6vD89J_fw658-270x300.png" alt="" /></p>

<p>这九个事件根据请求的顺序最开始是 onBeforeRequest ，最后是 onComplete，基本的顺序如图所示，需要说明的是在onAuthRequired事件之后会再次触发onBeforeSendHeaders，而在onBeforeRedirect之后会重新出发 onBeforeRequest，而如果请求的url是 data或者是file协议，则在执行完onBeforeRequest事件之后会直接触发 onResponseStarted ,在这顺序之下，如果出现错误，都会触发onErrorOccurred事件，也就是说，如果我们对一个网络请求进行监听，那么只有onBeforeRequest事件必定会触发，后面的事件会根据情况才会触发。</p>

<p>下面是每个事件触发的时机和功能：</p>

<ul>
<li>onBeforeRequest : 在一个请求发生的时候，tcp连接之前被触发，可以用于重定向请求或者是进行请求拦截取消</li>
<li>onBeforeSendHeaders : 在一个请求发生的时候，初始的http(s) headers已经准备好的时候触发，这个事件主要用于修改发送的头部信息。在这个事件阶段中可以进行请求的拦截取消或者重定向</li>
<li>onSendHeaders ： 在所有注册了onBeforeSendHeaders事件（可能在不同扩展中）都触发之后，http(s) header发向网络之前触发，这个事件是异步的，触发时不会阻塞http header 发向网络，也就是说不能改变header的信息了。</li>
<li>onHeadersReceived ： 在http(s) headers 接受的时候触发，这个事件主要用于修改接收到的http(s) headers 。 在这个事件中可以控制请求。</li>
<li>onAuthRequired ： 在一个请求需要用户认证的时候被触发。</li>
<li>onBeforeRedirect ： 在一个重定向请求产生的触发，这是一个异步事件，不能控制请求</li>
<li>onResponseStarted：在响应的first byte 接收到的时候触发。对于http请求，这个请求触发的时候status line(状态信息) 和 头部都已经获得，这个一个异步事件，不能控制请求。</li>
<li>onCompleted ： 在一个请求成功之后触发</li>
<li>onErrorOccurred ： 在一个请求失败时候触发</li>
</ul>


<p>webRequest API 只会监听在host permission中配置的域名，只对 http、https、ftp、file、chrome-extension 协议起作用，另外有些url是上面协议的，但是被排除在监听范围内，例如 chrome-extension 中其他扩展发出的request，<a href="https://www.google.com/chrome">https://www.google.com/chrome</a> 等，都不会被监听到。另外，在扩展中的<strong>同步</strong>XMLHttpRequest请求也不会被拦截下来，以免造成死锁。另外，有些协议只会触发 本身支持的事件，例如 file:// 协议，只会触发 onBeforeRquest ，onResponseStarted，onCompleted，onErrorOccurred 。</p>

<p>如何去将注册一个事件：
通过事件的 addListener 方法可以注册一个webRequest事件，addListener 接收三个参数，第一个参数是callback方法，会返回一个object对象，其中包含了这次请求的详细信息。具体包括</p>

<ul>
<li>frameId 发出请求的frameId</li>
<li>method 请求的方式</li>
<li>parentFrameId 发出请求的frameId的父frameId，如果没有，则为-1</li>
<li>requestId : 这个Id在一次浏览器的session和一个扩展中是唯一的，用于识别各个请求</li>
<li>tabId ： 请求发出的tab页面的id，如果是从扩展中发出的，则为-1</li>
<li>timeStamp : 请求发出的时间戳</li>
<li>type ： 请求是由那类元素发出来的</li>
<li>url ： 请求的url</li>
</ul>


<p>第二个参数是一个过滤器，用于匹配符合条件的请求，参数如下：</p>

<ul>
<li>urls ： urls数组，被匹配到的才会触发回调</li>
<li>types : 匹配请求发出的元素类型 ，有 main_frame、sub_frame、stylesheet、script、image、object、xmlhttprequest、other</li>
<li>tabId ：匹配由哪个tab发出的</li>
<li>windowId : 匹配由哪个window发出的</li>
</ul>


<p>第三个参数是指定是否进行请求阻塞（对于一些特定事件起效），当指定为blocking 之后，回调函数将会是同步的，意味着这个请求将会被阻塞直到回调完成， 这样子我们可以返回一个blickingResponse对请求进行控制，具体如下：</p>

<ul>
<li>cancel ： 拦截请求，只能在onBeforeRequest中使用</li>
<li>redirectUrl ： 重定向请求，只能在onBeforeRequest和onHeadersReceived中使用</li>
<li>requestHeaders ： 修改request请求http header ，只能在onBeforeSendHeaders中使用</li>
<li>responseHeaders ： 修改response请求的http header ，只能在onHeadersReceived 中使用</li>
<li>authCredentials ： 修改验证的username和password信息，只能在onAuthRequired中使用</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chrome.tabs 的事件研究]]></title>
    <link href="http://qbright.github.io/blog/2014/05/27/chrome.tabs/"/>
    <updated>2014-05-27T19:01:56+08:00</updated>
    <id>http://qbright.github.io/blog/2014/05/27/chrome.tabs</id>
    <content type="html"><![CDATA[<p>这边文章主要对chrome.tabs 中的事件接口进行介绍，前半部分将对主要的事件接口的用法,场景进行介绍，后半部分将对一些常用的操作中说触发的事件进行解剖</p>

<!-- more -->


<p>chrome extension api 中定义了一套关于监听和操作浏览器标签页tabs的接口 , 用于对tabs的操作和状态改变的监听。
在扩展中使用chrome.tabs 的 api 需要在manifest.json 中的permission 属性中添加 tabs ：</p>

<p>{
&ldquo; permissions &rdquo; : [ &ldquo; tabs &rdquo; ]
}
chrome.tabs 的事件中很多情况下面会返回一个 Tab 对象 , 对象包含以下属性 :
&gt; * id ：在浏览器生命周期周期内Tab的唯一标识
* index ：从0开始标识一个window下面的Tab
* window ：tab的窗口id
* openerTabId ：打开当前tab的tabId
* selected ：标记tab页有没有被选中
* highlighted ：标记tab页有没有被高亮
* active ：标记tab页在其所在的window中有没有处于激活状态
* pinned ：标记tab页有没有被固定
* url ：tab页所展现的内容的url , 需要permission中有tabs 权限
* title : tab页所展现的title , 需要permission中有tabs 权限
* faviconUrl ：tab页面icon的url,需要permission中有tabs 权限 , 如果是在loading状态下tab页的faviconUrl可能是空的
* status ：标识tab的状态 , loading和complete 两种
* incognito ：标识tab页是否在隐身页状态
* width ：tab的宽度
* height ：tab的高度</p>

<p>chrome.tabs 中提供了若干个tabs的状态变化事件 , 让开发者可以比较精细的去监听自己关注的事件,事件列表如下 :
&gt; * onCreated ： 在一个标签创建的时候被触发
* onUpdated ：在一个标签状态改变之后被触发
* onMoved ： 在一个标签被移动的时候被触发
* onActived ： 当一个标签被激活的时候被触发
* onHighlightChanged ：当一个标签被高亮的时候被触发
* onDetached ：当一个标签脱离一个窗口(window) 的时候被触发
* onAttached ：当一个窗口的标签附着到另外一个窗口的时候被触发
* onRemoved ：当标签被移除的时候被触发
* onReplaced ： 当标签被替换的时候被触发</p>

<p>用法：</p>

<p>chrome.tabs.onSomeEvent.addListener(function callback)</p>

<p>下面对每个事件进行分析：</p>

<p><strong>onCreated</strong>
&gt; 在tab页<strong>被创建</strong>的时候被触发 , url 和 title 可能是空的 . 如果需要得到url等信息，可以使用 <strong>onUpdated</strong> 事件 在url设置的时候获取。</p>

<p>&gt;&gt; chrome.tabs.onCreated.addListener(function(Tab){
<em>doSomeThing..</em>
});</p>

<p>&gt; 在创建tab页的时候会发出这个事件 , 一般会返回以下信息</p>

<p>&gt; 这里需要注意的是在一些情况下title和url属性的值可能为空：</p>

<p>&gt; * 在页面中跳转链接时会为空
* 当在页面中的链接使用右键菜单的时候会有这些信息</p>

<p><strong>onUpdated</strong></p>

<p>&gt; 在页面<strong>状态发生改变</strong>的时候出发这个事件
&gt;&gt; chrome.tabs.onUpdated.addListener(function(tabId , changeInfo, tab){
<em>doSomeThing..</em>
});
回调函数的参数中:</p>

<p>&gt;&gt; * tabId : 触发事件的Tab的tabId
* changeInfo : 这个主要返回两个状态, 一个是<strong>loading</strong> 另外一个是<strong>complete</strong>
* tab : tab对象</p>

<p><strong>onMoved</strong>
&gt; 当tab页在一个window中的tab顺序发生改变的时候触发事件
&gt;&gt; chrome.tabs.onMoved.addListener(function(tabId,moveinfo){
<em>doSomething..</em>
});
回调函数的参数中:</p>

<p>&gt;&gt; * tabId : 触发事件的Tab的tabId
* moveInfo : 移动的情况 , 其中包括三个属性 : fromIndex , toIndex , windowId ; 分别表示 原来tab的位置 , 当前tab的位置 , 所在的windowId.</p>

<p>&gt;&gt; <strong>说明</strong> 在移动的过程中move事件可能会被触发多次 , 具体为 <strong>|fromIndex - toIndex| &gt; 1</strong> , 也就是说当tab页面移动一个位置时 , 会<strong>触发一次事件</strong>，当没有 “跨过” tab 页面的时候，不会触发事件 , 而且move事件<strong>只对</strong>在通过window中的移动生效 , 如果tab页被移动到别的widnow中去 , 将会触发<strong>onDetached</strong>事件 , 而不会触发move事件。</p>

<p><strong>onActivated</strong></p>

<p>&gt; 当在一个window中的tab页面被激活的时候被触发
&gt;&gt; chrome.tabs.onActivated.addListener(function(activeInfo){
<em>doSomething..</em>
});
回调函数的参数中:</p>

<p>&gt;&gt; * activeInfo 中包括tabId 和 windowId . 分别是被激活标签的tabId 和 被激活标签所在window的windowId .</p>

<p>&gt;&gt;<strong>说明</strong> activated 事件只会在同个window中的激活事件被触发，如果有多个window , 切换window带来的tab切换不会触发activated事件</p>

<p><strong>onHighlight</strong>
&gt;在同一个window中有tab被高亮时被触发
&gt;&gt; chrome.tabs.onHighlight.addListener(function(highlightInfo){
<em>doSomething..</em>
});
回调函数的参数中:</p>

<p>&gt;&gt; * highlightInfo 中包括 windowId 和 存储tabId 的数组</p>

<p>&gt;&gt; <strong>说明</strong> highlighted 事件也是一种激活事件,那和 activated 事件有什么不同呢，我们可以看到 highlightInfo 中有可以存储多个 tabId 的数组 , 而activated事件中只能存储一个tabId , 这说明在通过 window 中 , 能存在多个tab被激活 , 原来 , 在chrome中使用shift键可以<strong>连续选中多个tab</strong> , 在这种情况下，highlighted和activated事件就存在区别了</p>

<p><strong>onDetached</strong>
&gt; 在一个tab被脱离原来的window的时候被触发</p>

<p>&gt;&gt; chrome.tabs.onDetached.addListener(function(tabId,detachInfo){
<em>doSomething..</em>
});
回调函数的参数中 :</p>

<p>&gt;&gt; * tabId 为被脱离window的tab的id , detachInfo 中有 oldPosition , oldWindowId , 表示 被脱离window的tab原有的位置(index) 和 window的Id</p>

<p><strong>onAttached</strong></p>

<p>&gt; 在一个tab被贴附到window的时候被触发</p>

<p>&gt;&gt; chrome.tabs.onAttached.addListener(function(tabId,attachInfo){
<em>doSomething..</em>
});
回调函数的参数中:</p>

<p>&gt;&gt; * tabId 为贴附到windowd的tab的id, attacheInfo 中有 newWindowId , newPosition , 表示 贴附的window的 id 和 tab贴附的位置(index)</p>

<p><strong>onRemoved</strong></p>

<p>&gt; 在一个tab被关闭的时候被触发</p>

<p>&gt;&gt; chrome.tabs.onRemoved.addListener(function(tabId,removeInfo){
<em>doSomething..</em>
});
回调函数的参数中:</p>

<p>&gt;&gt; * tabId 为被关闭的 tab 的 id , removeInfo 中有 isWindowClosing 和 windowId, 表示是否是通过关闭浏览器的按钮关闭的tab , windowId 表示被关闭的tab 所在的window 的 id .</p>

<p>&gt;&gt; <strong>说明</strong> isWindowClosing参数只在点击window的关闭按钮才会返回true , 在原生的chrome中 , 关闭了最后一个tab会把所在的 window也给关掉 , 这种情况下会返回false .</p>

<p><strong>onReplaced</strong></p>

<p>&gt;在 一个tab页面被替换的时候被触发 , 存在于 预先加载页面 等情境中</p>

<p>&gt;&gt; chrome.tabs.onReplaced.addListener(function(addedTabId,removeTabId){
<em>doSomething..</em>
});
回调函数的参数中：</p>

<p>&gt;&gt; * addedTabId 表示替换的Tab的id
* removeTabId 表示被替换的Tab的id</p>

<p>&gt;&gt; <strong>说明</strong> replace事件的触发情景从官方文档中很难被真正理解 , 官方文档的描述是<strong>Fired when a tab is replaced with another tab due to prerendering or instant.</strong> 通过查阅资料，在chrome设置了 <strong>预测网络操作，以提高网页加载速度</strong> 的情况下有可能触发这个事件</p>

<hr />

<hr />

<hr />

<p>下面对一些常用的动作所触发的事件进行解析，以便大家更好的了解tabs 的事件机制：
&gt;<em> <strong>在tabs的事件机制中，触发的事件优先级已经确定，不会因为先后注册而产生回调的顺序不同的情况发生。</strong>
&gt;</em> <strong>一般来说每个浏览器tab页的操作都会触发多个事件，一个事件可能被多个动作说触发，所以需要根据你需要监听的事件颗粒度进行组合</strong></p>

<p><strong>新建标签页</strong>
&gt; 新建标签页的时候会依次触发 :
&gt;&gt; * onCreated
* onActivated
* onHighlighted
* 若干个 onUpdated</p>

<p>&gt; 从上面的顺序可以看出，打开这个动作其实分成两部分，一部分是开个一个空白页面onCreated,第二部分才是加载内容onUpdated,因此，有些时候在onCreated中的url和title为空，如果要获取打开的页面的url和title , 可以在create回调中使用<strong>chrome.tabs.get</strong> 获取tab的详细信息。</p>

<p><strong>刷新当前页面</strong>
&gt; 刷新页面的时候发触发 若干次的update事件。
&gt; 按照状态来分的话一般是两次 , 分别是在页面 <strong>loading</strong> 和 <strong>complete</strong> 的时候分别触发事件 , 这两次触发的说返回的tab信息一般不同 , complete的信息会比较的丰富，但是触发的时间和页面的加载时间相关。</p>

<p><strong>关闭页面</strong></p>

<p>&gt; 关闭页面的时候会一次触发以下事件:
&gt;&gt; * onRemove
* onActivated
* onHighlighted</p>

<p>&gt; 关闭的时候会首先触发当前页面的remove事件 , 其回调中返回的tabId为移除的tabid , 在移除之后其他的tab页面会被选中高亮, 因此会触发这个页面的activated事件和highlighted事件 , 这个时候返回的就是被选中高亮的页面的tabid。</p>

<p><strong>Tab页之间的切换</strong></p>

<p>&gt; 切换tab页的时候会触发以下事件：</p>

<p>&gt;&gt; * onActivated
* onHighlighted</p>

<p>&gt; 切换的时候会触发 activated 事件和 highlighted 事件 , 需要注意的是 , 在切换的时候不会触发<strong>updated</strong> 事件 , 即使tab的actiavte 状态已经改变。
&gt; 从上面的例子可以看出：<strong>onActivated</strong> 和 <strong>onHighlighted</strong> 事件会被同时触发 , 区别在于使用 <strong>shift</strong> 选中多个tab的时候onHighlighted会返回多个tab 的数组。</p>

<p><strong>将Tab页拖拽至其他窗口</strong></p>

<p>&gt; 动作将依次触发以下事件：
&gt;&gt;* onDetached
* onActivated
* onHighlighted
* onActached
* onActivated
* onHighlighted
* onDetached
* onActached
* onActivated
* onHighlighted</p>

<p>&gt;这个动作触发了九次事件，是的，就是这么多次,这九个事件是怎么来的呢？首先, 当你将一个tab从原来的window中脱出的时候触发了 <strong>detached</strong> 事件，原来window的其他页面会触发 <strong>activated</strong> 和 <strong>highlighted</strong> 事件 , 在你拖动的过程中 , 其实又间接生成了一个window , 在将你的tab附着上去让你进行拖动 , 因此会分别触发 <strong>actached</strong> , <strong>activated</strong> , <strong>highlighted</strong> 事件 , 当你到达目标窗口的时候 , 首先会脱离刚刚生成的这个window , 触发<strong>detached</strong>事件 , 然后附着到目标窗口, 触发 <strong>actached</strong> 和 <strong>activated</strong> 和 <strong>highlighted</strong> 事件</p>

<p>上面就是对各个事件接口的解析和常用操作触发事件的分析，由于各种动作说触发的事件都不是唯一的，因此在选定事件的时候要根据具体的业务需求监听最适合的事件，这样能够减少事件的冗余触发，保证扩展的性能。对tab的事件触发进行分析，能够很好的了解tab动作的细节，建议大家可以做些实验</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内容安全策略(CSP)]]></title>
    <link href="http://qbright.github.io/blog/2014/05/22/chrome.extension.csp/"/>
    <updated>2014-05-22T19:05:55+08:00</updated>
    <id>http://qbright.github.io/blog/2014/05/22/chrome.extension.csp</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<blockquote><p><a href="https://w3c.github.io/webappsec/specs/content-security-policy/">Content Security Policy(CSP)</a> 是一种计算机安全的概念 , 用来防御跨站脚本攻击<a href="http://en.wikipedia.org/wiki/Cross-site_scripting">(XSS)</a> , 现在他是W3C网络应用安全的候选标准,CPS 提供了一种标准的HTTP头让网站去声明允许那些资源加载到自己的网页之中 , 能够控制到 JavaScript , CSS , HTML , Frames , fonts , image , embeddable object , Java applets , ActiveX , audio 和video 等类型的资源。CSP 刚开始是由 <a href="http://en.wikipedia.org/wiki/Mozilla_Foundation">Mozilla 基金会</a> 制定并实现在 Firefox4 中,下面为CSP各种<strong>部分实现</strong>的版本:</p>

<blockquote><ul>
<li>Content-Security-Policy : W3C推荐的标准的头部命名 , 被 Chrome 25 , Firefox 23 支持。</li>
<li>X-WebKit-CSP : 在 2011 年被Chrome和基于WebKit内核的浏览器所支持。</li>
<li>X-Content-Security-Policy : 被 Gecko2 内核的浏览器Firefox 4 、Thunderbird 3.3 SeaMonkey2.1 支持。在 IE10 和 IE11 的沙箱模式中也支持这种头部。 另外一些框架也支持CSP , 例如 <a href="https://angularjs.org/">AngularJs</a> 和 <a href="https://www.djangoproject.com/">Django</a></li>
</ul>
</blockquote></blockquote>

<!-- more -->


<h3>规则</h3>

<blockquote><p>这里主要谈谈CSP在Chrome extension中的应用 , 在通常情况下 , CSP通过黑白名单的机制控制资源的加载和执行脚本 , 为Chrome extension 提供一种定制的策略 , 由开发者去确定哪些资源是Chrome extension 需要被访问的 , 这些策略在Chrome extension 的 host permission 上提供另外一层保护。上面说到，在Web上这个策略是通过HTTP头或meta元素定义的 , 在 Chrome extension 中 , 不存在这两种方式 , 扩展是通过 <strong>manifest.json</strong> 文件定义的:</p>

<p> <code>{"content_security_policy": "[POLICY STRING GOES HERE]" }</code></p>

<h4>默认安全策略</h4>

<blockquote><p>没有定义 <strong>manifest.json</strong> 文件中的 <strong>manifest_version</strong> 字段默认是没有安全策略的，只有定义了 manifest_version 为 2 的扩展才会启用默认的内容安全策略。(现版本的chrome extension 都强制需要指定 manifest_version 的值为 2 )。</p>

<blockquote><p>默认的安全策略为：<strong>script-src &lsquo; self &rsquo; ; object-src &lsquo; self &rsquo;</strong>,  具体策略如下：</p>

<hr />

<p><strong>不执行 Inline JavaScript</strong></p>

<blockquote><p>Inline JavaScript 不会在页面被执行 , 这个规则同时禁止内嵌 <strong><code>&lt;script&gt;</code></strong> 标签 和 元素的内联事件 (例如:<strong><code>&lt; button onclick="XXX"&gt;</code></strong>); 当使用 Inline JavaScript 的时候 , Chrome extension 会抛出 <strong>Refused to execute inline script because it violates the following Content Security Policy directive: &hellip; &ldquo;</strong> 错误。</p>

<blockquote><p>注意：当使用jquery的ajax方法时，如果将dataType指定为<strong>script</strong> 时 , 也会被CSP规则拦截。</p>

<h4>只加载本地脚本和资源</h4>

<p>在Chrome extension 中，只有扩展包类的脚本和资源才会被加载, 这确保了扩展只执行已经打包在扩展之中的可信代码，从而避免了向上的网络攻击者通过恶意重定向您所请求的Web资源所带来的安全隐患。因此，在使用JQuery等第三方库或者框架时，应该在扩展包中引入这个源文件，而不能通过外部的内容分发网络（CDN）进行在线加载。也就是说，在页面不能出现：
    <script src="http://ajax.googleapis.com/ajax
        /libs/jquery/2.0.1/jquery.min.js"></script>
    只能把源文件下载到扩展包中,通过相对路径去引用 ：
    <strong><code>&lt;script src="jquery.min.js" &gt;&lt;/script &gt;</code></strong></p></blockquote></blockquote></blockquote></blockquote>

<p>更改默认的权限配置</p>

<blockquote><p>首先 , 在chrome extension 中，没有任何办法绕过 <strong>禁止 Inline JavaScript</strong> 的限制,对于第二个限制 <strong>只加载本地脚本和资源</strong> ,可以通过将 <strong>HTTPS</strong> 源的脚本加入到配置的白名单中来放宽策略的限制。另外白名单不支持<strong>HTTP</strong>协议的源。
如果要允许加载来自<a href="Https://example.com">Https://example.com</a> 的脚本需要把配置改为:</p>

<p><code>{
        "content_security_policy": "script-src 'self' https://example.com ; object-src 'self'"
    }</code></p>

<p>需要指出的是 chrome extension 中 script-src 和object-src 都是需要配置的。</p></blockquote>

<p>下面为所有能够进行配置的资源项字段:</p>

<ul>
<li>default-src : 这个配置对所有的资源文件生效</li>
<li>script-src : 这个配置匹配所有的javascript资源, 默认情况下阻止所有对远程资源的引用(除非加上白名单引用https源) , 禁止执行inline script 和 eval() 方法,除非你指定了 unsafe-inline 和 unsafe-eval 配置。</li>
<li>object-src : 这个配置对所有 &lt;object&gt; &lt;embed&gt; &lt;applet&gt; 标签引用的源进行限制</li>
<li>img-src : 这个配置对所有图片和favicons起效</li>
<li>media-src : 这个配置对所有的 &lt;audio&gt; 和 &lt;video &gt; 标签引用的资源起效</li>
<li>frame-src : 这个配置对所有的 &lt;frame&gt; 和 &lt;iframe&gt; 标签引用的资源起效</li>
<li>font-src : 这个配置对@font-face 应用的资源起效</li>
<li>connect-src : 这个配置对XMLHttpRequest 请求的资源起效</li>
<li>style-src : 这个配置对 &lt;style &gt; 标签引用的资源起效</li>
<li>report-uri ： 这个配置用于指定一个url , 在检测到违反Chrome extension CSP配置的时候进行信息上报。

<blockquote><p>report 上报的信息有：</p>

<blockquote><ul>
<li>document-uri : 违反规则的页面URI</li>
</ul>
</blockquote></blockquote></li>
<li>referrer : 违反规则的页面的referrer</li>
<li>blocked-uri : 违反规则的请求链接uri</li>
<li>violated-directive : 违反的规则名称</li>
</ul>
</blockquote>

<h3>开发时对于CSP的注意事项</h3>

<blockquote><p>在开发的过程中也因为CSP的限制遇到了一些问题, 首先是在开发YY音乐台的过程中，之前制定好的方法是将YY音乐台整个打包到扩展之中，但是由于CSP的限制，其中的音频，视频的flash资源都不能通过外部接口去请求，由于各种原因音频视频的资源无法使用https的服务,最后采用的折中策略就是将YY音乐台部署在线上，需要和浏览器交互的部分使用 content_script 进行注入控制进行交互，这样做绕过了CSP的限制，但是由于是一个线上的Web应用程序，在开发过程中做出浏览器兼容性的调整，而且由于线上更新和浏览器版本的更新存在时间差 , 还要对浏览器扩展的版本做出兼容 , 所以在开发的时候需要权衡各方面的开发成本。</p>

<p>如果确实需要应用外部的http的资源，其实还有个比较绕弯的方法，就是通过ajax请求将资源请求回来，然后用过 <code>chrome.tabs.executescript</code> 或者 <code>chrome.tabs.insertCSS</code> 进行资源插入 , 从而到达运行的目的 (不知道这算不算是一个Chrome extension 权限策略的漏洞= =)</p></blockquote>
]]></content>
  </entry>
  
</feed>
